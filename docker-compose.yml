version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: microservice-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: microservice_db
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microservice-network

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: microservice-gateway
    restart: unless-stopped
    ports:
      - "12000:12000"
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=12000
      - AUTH_SERVICE_URL=http://auth-service:12004
      - USER_SERVICE_URL=http://user-service:12001
      - PRODUCT_SERVICE_URL=http://product-service:12002
      - ORDER_SERVICE_URL=http://order-service:12003
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/microservice_db?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
    depends_on:
      - mongodb
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:12000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: microservice-auth
    restart: unless-stopped
    ports:
      - "12004:12004"
    environment:
      - NODE_ENV=production
      - PORT=12004
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/microservice_db?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
    depends_on:
      - mongodb
    networks:
      - microservice-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: microservice-user
    restart: unless-stopped
    ports:
      - "12001:12001"
    environment:
      - NODE_ENV=production
      - PORT=12001
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/microservice_db?authSource=admin
    depends_on:
      - mongodb
    networks:
      - microservice-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    container_name: microservice-product
    restart: unless-stopped
    ports:
      - "12002:12002"
    environment:
      - NODE_ENV=production
      - PORT=12002
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/microservice_db?authSource=admin
    depends_on:
      - mongodb
    networks:
      - microservice-network

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    container_name: microservice-order
    restart: unless-stopped
    ports:
      - "12003:12003"
    environment:
      - NODE_ENV=production
      - PORT=12003
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/microservice_db?authSource=admin
    depends_on:
      - mongodb
    networks:
      - microservice-network

volumes:
  mongodb_data:
    driver: local

networks:
  microservice-network:
    driver: bridge
